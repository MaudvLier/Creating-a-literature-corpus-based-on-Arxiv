Pairbot: A Novel Model for Autonomous Mobile Robot Systems Consisting of Paired Robots


Introduction


Background


The seminal paper [*REF*] firstly introduced a concept of a distributed
system consisting of multiple mobile robots, where each robot
autonomously observes the positions of the other robots and moves to a
new position based on the given algorithm. The robots are anonymous,
i.e., cannot be distinguished by their appearance, and uniform,
i.e., execute the same algorithm. In the literature [*REF*], they call
the mobile robot model LCM(Look-Compute-Move)-model, and give a formal
discussion on the power and limitations of the distributed coordination,
e.g., pattern formation and agreement problems. Since the introduction
of LCM-model, much related work has been studied to clarify its
computational power and limitations
[*REF*; *REF*] for over twenty years.


As one simple problem in LCM-model, a gathering problem for two
robots, called a rendezvous problem is widely studied in the
literature as [*REF*; *REF*]. The gathering problems for more than two
robots are also investigated in much of literature such as
[*REF*; *REF*; *REF*; *REF*; *REF*]. Not only the gathering
problems, but many other distributed coordination problems are also
studied from the viewpoint of the relation between the computational
capabilities and the solvability of the problems. The pattern formation
problem [*REF*; *REF*; *REF*] is also one of the fundamental coordination
problems which makes the robots to form the given pattern, e.g., line
or circle. The pattern formation problem is practically important
because if the robots can form the given pattern, they can agree on some
specific roles, e.g., a leader, a center, or a corner. In a wide
sense, the gathering problem can be also categorized as the one of the
pattern formation (forming a point).


Many of studies mainly focus on the relation between the computational
capabilities of each robot and the solvability of the given problem.
This means that the clarification of the required (possibly minimum)
capabilities to solve the given problem is an important issue. To solve
the given problem, many capabilities of each robot should be considered,
e.g., geometric agreement, scheduler, visibility, transparency, and
many others, and many results show that the solvability of each problem
deeply depends on these capabilities. To clarify the required
capabilities for the given problem has many advantages [*REF*],
for example, reducing the costs, making easy to expand of the system
(scalability), and allowing fault-tolerance. Therefore, various
distributed coordination problems for autonomous mobile robots are still
widely studied in many fields, such as robotics, engineering, or medical
science.


Related Work


Based on the seminal work [*REF*] which firstly introduced an autonomous
mobile robot model and its computational capability, much related work
has been investigated about discussing its computational power and
limitations for various distributed coordination
[*REF*; *REF*], e.g., rendezvous [*REF*; *REF*; *REF*; *REF*; *REF*],
gathering [*REF*; *REF*; *REF*; *REF*; *REF*; *REF*], pattern
formations [*REF*; *REF*; *REF*; *REF*; *REF*; *REF*], and
flocking [*REF*; *REF*; *REF*].


As an extended capability of mobile robots, an externally visible memory
register, called light, is proposed in [*REF*]. An autonomous mobile
robot with the light is called a luminous robot, and every luminous
robot maintains a persistent value, called color, which means that the
value is never reset even if an oblivious robot terminates its action.
Each luminous robot can observe the colors of the other robots within
its visibility range, and this improves the power of each mobile robot,
hence, many problems are newly investigated based on this capability
such as [*REF*; *REF*; *REF*; *REF*; *REF*].


Recently, a programming matter [*REF*], which is a matter that can change
its physical properties, e.g., shape or density, in a programmable
fashion, and it attracts much attention of many researchers as one of
the practical applications of distributed coordination, e.g., the
realization of surgical treatments using nanorobots [*REF*] or a
set of modular robots which can freely transform its
shape [*REF*; *REF*]. As the one method to realize a programming
matter, a self-organizing particle system, also called Amoebot model,
is newly proposed in [*REF*]. Amoebot model consists of a large
number of computational particles on a (triangular) grid plane which
locally interacts one another to solve the given problem. Each particle
repeatedly changes its state, either contraction or expansion, which
means the state that a particle occupies one node and two adjacent nodes
respectively. In Amoebot model, it allows two connected particles to
perform a coordinated movement, called a handover, which is an
interaction that a particle can contract out of a certain node at the
same time as another particle expand into that node. Amoebot model can
realize many distributed coordination problems such as a universal
coating problem [*REF*], a leader election [*REF*], convex hull
formation [*REF*], and many others.


Amoebot model has some imperative differences from the conventional
autonomous mobile robots [*REF*]. In Amoebot model, each particle can
communicate by writing their local memory and reading the local memory
of adjacent particles, whereas there is no explicit communication in
autonomous mobile robots (known as LCM-model). In LCM-model, each
robot determines its behavior based on the snapshot taken at Look
phase instead of a communication. Moreover, Amoebot model assumes the
symmetry breaking: when two or more particles attempt to move to the
same cell, one of them will succeed. On the other hand, each robot in
autonomous mobile robots cannot break the symmetry when two or more
robots attempt to move the same point, which implies that a sophisticate
algorithm is required to avoid some unintended movement among the
robots.


Contribution


In this paper, we consider a new method for realizing a programmable
matter that makes it easy to investigate and analyze its capabilities
and feasibilities by using existing knowledge. We introduce a new model
named Pairbot model where two robots operate as a pair on a grid
plane. Pairbot model has several new capabilities, e.g., local label
or exclusive move, which are not assumed in a classical LCM-model, but
most of capabilities are the same as LCM-model&apos;s. The new capabilities
provide higher computational power (i.e., solvability) than
LCM-model, as well as good insight for realization of programmable
matter based on LCM-model.


Amoebot model [*REF*] is another new model for programmable matter
which is inspired by the behavior of amoeba. Amoebot model has new
computational capabilities, e.g., communication, symmetry breaking,
and occupying two points, which are not assumed in the conventional
LCM-model. Therefore, it is difficult to directly compare the
computational capability between Amoebot model and LCM-model. On the
other hand, Pairbot model is a new theoretical model which has many
same capabilities as LCM-model&apos;s, thus the differences between
Pairbot model and LCM-model are also clear. By the similarity and
difference between Pairbot model and LCM-model, Pairbot
model provides higher computational power than LCM-model, moreover,
it is also possible to introduce plenty of knowledge from many results
about LCM-model investigated over twenty years.


In the proposed model, Pairbot model, each robot has the one robot as
its unique partner, called buddy, each other, and we call the paired
two robots pairbot. A pairbot system consists of two or more
pairbot. Each of two robots in one pairbot can recognize each other
as its buddy, and the two robots repeatedly change their geometrical
relationship, short and long, to achieve a goal. When a pairbot is
in short state, the two robots occupy the same point, whereas in
long state, the two robots are located on the two distinct (adjacent)
points.


As the first step to show the feasibility and effectiveness of Pairbot
model, we introduce two simple problems, the marching problem and the
object coating problem, and propose two deterministic algorithms to
solve these two problems respectively. We expect that these two problems
and algorithms help to understand Pairbot model, and provide a good
insight for its computational power and limitations.


Paper Organization


This paper is organized as follows: Section 2 introduces the proposed
system model named Pairbot model. Section 3 gives the marching problem
based on Pairbot model, and proposes an algorithm to solve the
marching problem, and we present another problem named the object
coating problem and the algorithm to solve the problem in Section 4. We
conclude our work in Section 5.


The Proposed Model: Pairbot model


Triangular Grid Plane


FIGURE


We consider a set of *MATH* autonomous mobile robots, denoted by
*MATH* on a 2-dimensional triangular grid plane *MATH* like
Fig. [1]. The distance between two points *MATH* and *MATH* on *MATH* is defined by the
following equation.


*MATH*. 


If the distance between two points is one, we say that the two points
are adjacent. The triangular grid plane *MATH* can be also
represented as an infinite regular graph
*MATH*, where *MATH* consists of all the points on *MATH* and *MATH* is defined
by every two adjacent points on *MATH*, i.e., for *MATH*,
*MATH*, *MATH* iff *MATH*.


Geometric Agreement


Every robot has its own local coordinate system which can be defined by
the directions, i.e., *MATH* and *MATH* axes, and the orientations,
i.e., the positive and negative side of each axis. We can consider
some levels of consistency among the robots on their local compass:
total agreement, when all the robots agree on the directions and
orientations of both axes; partial agreement, when all the robots
agree on the direction and orientation of only one axis or they agree on
chirality which means a sense of the orientation of the axes, i.e.,
clockwise or counter-clockwise; or no agreement, when there is no
agreement among the local coordinate system of each robot.


In this paper, we assume total agreement that all the robots in
*MATH* agree on the directions and orientations of both axes, but
no robot knows the position of the origin. In other words, no robot
knows its global coordinate, however, all the robots agree on the sense
of directions, e.g., north, south, east, and west.


Pairbot


In Pairbot model, every robot has its unique partner (called buddy):
robot *MATH* is the buddy of robot *MATH* if and only if robot *MATH* is
the buddy of robot *MATH*. When robots *MATH* and *MATH* are determined
as a pair, we call the two robots *MATH* and *MATH* a pairbot, and
denote as *MATH*.


The buddy of each robot is initially determined and never changes.
Obviously, the number of robots *MATH* is an even number because every
robot has its corresponding buddy, and without loss of generality, we
assume that robots *MATH* and *MATH* are the pairbot for an odd number
*MATH*, i.e., *MATH*, where *MATH*.


Operations 


Each robot *MATH* cyclically performs the following three operations,
Look, Compute, and Move, based on a well-known computational model
as LCM-model or Suzuki-Yamashita model [*REF*].
- Look: Each robot takes a snapshot consisting of the robots within
the visibility range with respect to its local coordinate system.
- Compute: Each robot performs a local computation based on the
snapshot taken by Look phase according to algorithm *MATH*.
Algorithm *MATH* is basically uniform, i.e., every robot
executes the same algorithm. As the result of Compute phase, each
robot determines its destination point to move.
- Move: Based on the result of Compute phase, each robot actually
moves to the adjacent destination point from the current point in
Move phase. Each robot moves instantly, this implies that each
robot is never looked by the other robots while moving. Null
movement (staying) is also allowed, i.e., a robot does not move.


Local Label 


Each robot locally maintains the labels for each incident edge, from 1
to 6, to distinguish its adjacent points. Each robot selects one
incident edge, labels the selected edge as 1, and labels the other edges
from 2 to 6 in clockwise order. Note that the direction of the edge
labeled as 1 may be different by the assumption of the geometric
agreements among robots, moreover, the clockwise order may also vary by
the assumption of chirality.


TABLE


In this paper, every robot has the same local labels, e.g., every
robot maintains the same labels as robot *MATH* in
Fig. [2](tlabel) due to total agreement.


Capabilities 


All the robots are oblivious, i.e., no memory, which means every robot
never knows any past executions of itself.


Each robot can recognize the other robots within its visibility range
*MATH*, this means each robot can sense only up to *MATH* 
hops far from itself. In other words, robot *MATH* on point *MATH* and robot
*MATH* on point *MATH* (where *MATH* and
*MATH*) can observe each other only when
*MATH*. In this paper, we assume that the
visibility range of each robot is one, i.e., each robot can observe
only the robots at the adjacent points.


Moreover, we assume that each robot has capability of weak multiplicity
detection, that is, each robot can distinguish from the following three
cases on the points within its visibility, no robot exists, only one
robot exists, and more than one robot exists. Note that if each robot
can count the exact number of the robots occupying the point within its
visibility range, we say it strong multiplicity detection.


All the robots in *MATH* are anonymous: each robot has no
identifier and no robot is distinguishable by its appearance. However,
each robot maintains the position of its buddy using its local label.
This implies that each robot has a local memory to maintain the position
(local label) where its buddy is located.


Moreover, we assume that when a pairbot occupies the same point, only
one robot can move to its adjacent point when it moves and we call this
an exclusive move. Note that no robot knows that any other two robots
are pairbot or not.


FIGURE


The two robots in one pairbot occupy the same point or two adjacent
points on *MATH* as Fig. We call the former one short state and the
latter one long state respectively. When a pairbot is in
short state, only one robot in the pairbot can (exclusively) move
the adjacent point from its current point and the pairbot becomes
long state. When a pairbot is in long state, either of the two
robots can move to the point occupied by its buddy, and the state is
changed back to short state. In Pairbot model, every
pairbot repeatedly changes its state, short and long, to achieve
the goal. Obviously, a pairbot never knows which robot moved while its
state changed because all the robots are oblivious.


Fig. [3] illustrates an example of pairbots. pairbot, *MATH* and *MATH*, is in long state,
and some other robots are placed on the other points on *MATH*. In
this case, robot *MATH* recognizes that its buddy is robot *MATH* on its
right side. However, *MATH* cannot know the pair relations of the other
robots, e.g., robot *MATH* never knows the buddy of robot *MATH* on
its lower left side. Robot *MATH* can recognize another robot is on the
same point due to weak multiplicity detection, moreover, *MATH* can
know that the buddy  *MATH* is on the point of its upper left side and
it is in long state.


Scheduler


We consider a scheduler which decides which robot to activate and
the timing of each operation. There are three representative
assumptions (models) for a scheduler, fully-synchronous (FSYNC),
semi-synchronous (SSYNC), and asynchronous (ASYNC).


In an FSYNC scheduler, all the robots are activated at the same time and
all the three operations, Look, Compute, and Move, are executed
based on the exactly same cycle time. In an SSYNC scheduler, all the
robots execute their operations at the same time, but some robots may
not be activated. The robots which are not activated by a scheduler wait
till all the activated robots terminate their operations. And in an
ASYNC scheduler, there is no assumption on the cycle time of each robot.
This implies that all the robots execute their operations at
unpredictable time instants and durations.


In this paper, we assume an ASYNC scheduler such that Move phase
operates atomically: each robot requires unpredictable finite time to
operate Look or Compute phase, but it can atomically move, called
the move-atomic property. Therefore, each robot is never observed
while it is moving. We assume that the two robots which are the
pairbot are activated at the same time by the scheduler.


Configuration


A configuration *MATH* consists of the positions of all the
robots in *MATH* at time *MATH*: *MATH*,
where *MATH* is the global coordinate of robot *MATH* at
time *MATH* on *MATH*. Note that no robot knows its global coordinate
on *MATH*. Let *MATH* be a non-empty subset of
*MATH* and *MATH* be an algorithm, we denote
*MATH* if a configuration *MATH* is obtained when each robot in
*MATH* simultaneously performs its Move operation of
*MATH* in configuration *MATH*. Hence a scheduler can be
presented as an infinite sequence *MATH* 
of non-empty subsets of *MATH*. An execution *MATH* of algorithm *MATH* 
along schedule *MATH* starting from configuration *MATH*, where *MATH* is an initial
configuration, can be defined as the infinite sequence of configurations
*MATH* such that *MATH* for all *MATH*.


Marching Problem and Algorithm


In this section, we introduce a basic problem, named the marching
problem, for Pairbot model, and propose an algorithm to solve the
marching problem.


Problem Definition


We consider a marching, which is a linear movement of the robots lined
up in a straight line to the agreed direction keeping their line
formation, as a basic moving operation of the set of pairbots. Before
the formal definition of the marching problem, we define a specific
formation of the pairbots.


We consider that the set of robots *MATH* initially forms a
straight line as Fig. [4], i.e., if any two points are occupied by robots,
every point located between the two points is occupied by a robot. We
assume that the straight line formed by the robots is parallel to the
agreed direction. And we also assume that there are at most two robots
on each point, however, there exist no two pairbots which are in
long state on the two same points. For example, let robots *MATH* and
*MATH* be one pairbot and robots *MATH* and *MATH* be another pairbot.
In this case, we do not consider the configuration such that *MATH* and
*MATH* occupy the same point and *MATH* and *MATH* occupy another same
point (which is an adjacent to the point occupied by *MATH* and *MATH*).
We call above configuration the robots (pairbots) are line-formed.


FIGURE


Now we define the marching problem as the following.


DEFINITION


Intuitively, in the marching problem, all the robots repeatedly move to
the agreed direction keeping line-formed. And the termination is not
considered in the marching problem.


Marching Algorithm


To help to understand, in this subsection, we assume that the positive
direction of *MATH* axis is on the right side like
Fig. [1]. Note that all the robots agree on the direction and orientation of one axis, thus we
can assume that every robot labels the edge on its right side as 1
(refer to robot *MATH* in Fig. [2]).


We describe the proposed algorithm using guarded actions:
*MATH*, which represents *MATH* is executed
only if *MATH* becomes true.


ALGORITHM


Algorithm represents the marching algorithm where the move
to the direction is *MATH*. In Algorithm,
line 1 can be executed only when a pairbot is in short state, and
line 2 or line 3 can be executed only when a pairbot is in
long state. To help to explain, we call the robot which has no
neighboring robot on *MATH* the head robot (denote *MATH*), i.e.,
*MATH*, and call the robot which has no
neighboring robot on *MATH* (the counter direction of *MATH*) the
tail robot (denote *MATH*), i.e., *MATH*.
Note that there can be two head robots (and/or tail robots) when the
pairbot is in short state.


A pairbot in short state, i.e., *MATH*, checks
the adjacent point *MATH*, and it becomes long state by an exclusive
move of one robot to the point *MATH* if one or no robot is on
*MATH*. Obviously, the head robot always moves to *MATH* and becomes
long state when it is in short state.


If the pairbots are in long state, the tail-sided robot of the two
robots, i.e., a robot which has its buddy on *MATH*, moves toward
its buddy (on *MATH*) when either of the two conditions (lines 2 and
3) is satisfied. Let *MATH* be a robot which has its buddy on *MATH*,
i.e., *MATH* (long state). If there is no robot on
*MATH*, which means *MATH* is the tail robot, robot *MATH* moves to
*MATH* and becomes short state (line 2). If *MATH* is not the tail
robot, i.e., *MATH*, robot *MATH* moves
to *MATH* only when another robot (denote *MATH*) is on the same point
of *MATH* (line 3). Note that *MATH* is not the buddy of *MATH* because
the pair of *MATH* is on *MATH*.


Correctness of Marching Algorithm


Now we show the correctness of the marching algorithm proposed in the
previous subsection.


LEMMA


PROOF


Now we show that all the robots repeatedly move toward the agreed
direction by the proposed algorithm. To help to understand, without loss
of generality, we assume that each robot *MATH* attempts to move to
*MATH* (the agreed direction).


LEMMA


PROOF


Object Coating Problem and Algorithm


In this section, we introduce an algorithm to surround the given object
(called coating) when line-formed pairbots find an object while
marching.


Problem Definition


An object *MATH* is a subset *MATH* of points of
*MATH* and let *MATH* be the subgraph of *MATH* induced by *MATH*. The
induced subgraph *MATH* is also called an object. We assume
that *MATH* is connected, and
Fig. [5] illustrates the examples of two different objects.


FIGURE


Now we define several subsets of the points on *MATH*.


DEFINITION


Surface set *MATH* is determined when *MATH* is given
and we simply denote *MATH* as *MATH* if *MATH* is
obvious. Now we define a different set of points which is a subset of
*MATH*.


DEFINITION


We simply denote *MATH* as *MATH* if *MATH* 
and *MATH* are obvious. In
Fig. [6](a), all the circles (including the filled circles) describes the surface set
*MATH*. And the filled circles illustrate the non-coating set
*MATH*: some points are not reachable from any robot, and some
points has no two or more disjoint paths from the robot due to an
articulation point.


FIGURE


DEFINITION


We simply denote *MATH* as *MATH* if *MATH* 
and *MATH* are obvious. Fig. [6](b)
illustrate a configuration that all the points in *MATH* are occupied by
the robots. Now we define the object coating problem using coating set
when *MATH* and *MATH* are given.


DEFINITION


FIGURE 


Fig. [7] illustrates an example of the object coating problem.
Fig. [7](a) presents an initial configuration. The robots in *MATH* are
line-formed, and they agree label 1 (*MATH*) as the direction to move.
Intuitively, the given line-formed set of robots executes marching
algorithm introduced in the previous subsection during it does not
recognize any object. If the head robot recognize any object, it changes
the direction to move based on the agreed chirality, and the other
robots follows the head robot, as a result, they surround the given
object and terminate. In Fig. [7](b), the object coating problem is solved because
all the points in *MATH* are occupied by the pairbots which are in
short state. Note that some robots are remained, i.e., not on the
points in *MATH*, when *MATH*.


Object Coating Algorithm


In this subsection, we introduce an algorithm to solve the object
coating problem. And we assume that the each robot can recognize whether
itself is the head robot or not to terminate the proposed algorithm. To
help to understand, we assume that the agreed direction to move is
*MATH* (positive direction of *MATH* axis). Algorithm
represents an object coating algorithm when object *MATH* is
given. In Algorithm, each robot locally executes function
*MATH* to determine the next direction to move, and move to
the determined direction if some conditions are satisfied.


ALGORITHM


Fig. [8] illustrates some examples that robot *MATH* locally determines the direction to move
(function *MATH*) when it recognizes an object, i.e.,
*MATH* (rules 2 and 3 of function *MATH*).
Note that robot *MATH* does not recognize any object, it moves to the
agreed direction (marching) by the first rule of function
*MATH*. In Fig. [8](a), *MATH* determines *MATH* to its direction to
move because an object exists on *MATH* and no object exists on
*MATH*, *MATH*, and *MATH* by the second rule of function
*MATH*. For the same reason, in Fig. [8](b), *MATH* 
determines *MATH* to its direction because no object exists on
*MATH*, *MATH*, and *MATH*. Also in the case of
Fig. [8](c), *MATH* determines *MATH* to its direction because no object exists on
*MATH*, *MATH*, and *MATH*, this prevents *MATH* from move to
non-coating points. The third rule of function *MATH* can be
satisfied only when two different objects located opposite to each
other, e.g., *MATH* and *MATH*. Fig. [8](d) represents
the case such that the third rule is satisfied. In this case, *MATH* 
determines *MATH* to its direction to move because *MATH* exists on
*MATH*, note that a robot may also exist on *MATH*.


FIGURE


Algorithm is similar to marching algorithm (Algorithm):
the pairbot in short state exclusively moves to the direction to
move if one or less robot exists on the destination point, the
pairbot in long state becomes short state by tail-sided robot (say
*MATH*) move if another robot exists on the point occupied by *MATH*.
However, different from marching algorithm, every robot repeatedly
changes its direction to move based on the result of function
*MATH*. Lines 1 and 2 are the executions for a pairbot in
short state to make it long state, however the head robot never
executes line 2 in order to avoid collision, i.e., two different
pairbot which are in short state (exclusively) move to the same
point, when the head robot return back after move around the object.
Lines 3 and 4 are the executions for a pairbot in long state to make
it short state. By line 3, the pairbot becomes short state when
another robot exists on the point occupied tail-sided robot.
Exceptionally, the tail robot in long state always becomes
short state, if no other robot exists on the point occupied by
head-sided robot. We omit the proof of an object coating algorithm
because it can be easily proved by the similar manner of the proof of
Algorithm.


Conclusion and Discussion


In this paper, we introduced a new computational model named Pairbot
model consisting of paired robots called pairbots, which is based on
LCM-model [*REF*]. In the proposed model, each pairbot repeatedly
changes its positional relation of the two robots, long and short,
to achieve the goal. Moreover, as the basic problems of Pairbot model,
we introduced two problems, the marching (linear movement) problem and
the object coating problem, and proposed the two algorithms to solve
these problems respectively to help to understand the computational
power and limitations of Pairbot model.


Pairbot model has basically the similar variations of the assumptions,
e.g., scheduler, geometric agreement, visibility, etc., however, it
has one big different feature: every robot has one implicitly
distinguishable robot as its buddy. In this paper, we introduced two
simple problems only, however, we are considering various problems in
Pairbot model, e.g., pattern formation (a line or a triangle),
filling problem, or uniform deployment, as the future work then we have
already solved some problems in Pairbot model. Interestingly, we found
some problem which is not solvable in LCM-model but it is solvable in
Pairbot model with the same capabilities (except the basic
capabilities for Pairbot model), e.g., line formation from an
arbitrary connected set of robots with 1-visibility range. We strongly
expect that this special feature of Pairbot model provides many new
possibilities in the field of autonomous mobile robots or the
feasibility of a programmable matter.


Obviously, in LCM-model, if some additional capabilities are assumed,
Pairbot model can be simulated by autonomous mobile robots in
LCM-model. For example, if each robot has its unique identifier and is
able to distinguish the other robot&apos;s identifier, Pairbot model can be
easily simulated. However, this assumption is too strong, this implies
this capability (unique ID) provides the more computational power than
Pairbot model. As the other way, luminous model (robots with light) is
also considerable. If each robot has an internal light with 7 colors, it
can be used for storing local label for its buddy. However, in this
case, if an SSYNC or ASYNC scheduler is assumed, only one robot in a
pairbot may be activated and this cannot guarantee the valid operation
of pairbots. To clarify the minimum required capabilities for
LCM-model to simulate Pairbot model as another future work.